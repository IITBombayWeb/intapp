# Migration file for creating "program" nodes from CSV.
#
# This file contains much of the information which we
# used to specify in the "Migration" class in Drupal 7.
# But why write code if you can write YAML?
# This is how we declare a Migration the Drupal 8 way.

# Migration ID.
#
# Usually the ID indicates what we are trying to migrate.
# In our case, we are migrating nodes of type "program".
id: program_data_iit_bombay
# Human-readable name of the migration for the UI.
label: Academic program and associated data.
# Migration group.
#
# Migration groups allow us to put related migrations under one
# umbrella so that we can execute or reference them together.
migration_group: program_data_iit_bombay
# Migration tags.
#
# Migration tags help us group migrations using tags. In our
# example, we tag all migrations with an "academic program"
# tag. That way, we can run all academic-program-related migrations
# using one command.
migration_tags:
  - node
  - programme
# Source.
#
# Under the source, we define the key "plugin" and other
# configurations specific to the plugin.
source:
  # We will be importing from a CSV file, so we will require
  # the migrate_source_csv module which introduces the CSV
  # source plugin with the identifier "csv".
  plugin: csv
  # Specify the path to the CSV data source.
  path: 'public://program_data_iit_bombay.csv'
  # Number of rows at the beginning which are not actual data.
  header_row_count: 1
  # Unique ID.
  #
  # These are the column names from the CSV file representing the
  # unique identifier for each source record. These will be used
  # by the Migration API to relate source records to migrated
  # entities usually for an updating imported records or for performing
  # rollbacks.
  keys:
    - ID
  # Definitions for fields available in the source.
  #
  # This is an optional configuration but it makes the UI more
  # explanatory. It is a set of key-value pairs where the key
  # is the property name and the value is a string describing what
  # the property is all about.
  fields:
    ID: Unique identifier for the program as in the data source.
    Title: Name of the program.
    Institute Name: Name of the Institute.
    Department: Name of the Department.
    Degree: Name of the Degree.
    Specialisation: Specialisation
    Packet: Send to packet
    field_description: Description
    field_enter_number_of_supporting: Additional Supporting Documents
  # Static values for the migration.
  #
  # We can assign hard-coded values to certain properties using constants.
  constants:
    bool_0: 0
    bool_1: 1
    uid_root: 1
    restricted_html: restricted_html
    url: http://www.iitb.ac.in
    text: IIT Bombay
    packet: 1
# Destination.
destination:
  # We want to import data from a CSV file, but how do we save it?
  # This plugin will be responsible for storing the records read during
  # the migration in to nodes. We can also store them as other entities
  # like taxonomy terms, etc. But in this case we want nodes.
  plugin: 'entity:node'
  # We specify the default node type as "program" because
  # we will only be importing nodes of type "program" in this
  # migration.
  default_bundle: programme
# Mapping.
#
# We can create simple mappings without any changes to
# source data or we can pass the source data through one or more
# plugins before the processed value is assigned to the
# destination.
process:
  # Here, we make a direct assignment of the "Title" column
  # as the node title. Not specifying a plugin name results in
  # the usage of the plugin "get" which simply copies the source
  # property value to the destination property.
  title: 
    plugin: concat
    source:
      - Institute Name
      - Department Name
      - Degree
      - Specialisation
    delimiter: ' '
  #Specialisation
  field_specialisation: Specialisation
  field_institute_link/uri: constants/url
  field_institute_link/title: constants/text
  field_course_duration: Course Duration
  add_to_cart: constants/packet
  field_description: Description
  field_enter_number_of_supporting: Additional Supporting Documents
  # There are certain destination fields which do not have
  # corresponding source fields. for these, we defined constants
  # in the "source" parameter. We can refer to them here as
  # "constants/NAME".
  #
  # The below segment makes the imported "program" nodes non-sticky.
  sticky: constants/bool_0
  # Similarly, we can specify whether we need or do not need the nodes
  # to be promoted to the front page. Although nodes are promoted to
  # front-page by default, I added the below line for demonstration.
  promote: constants/bool_1
  # Similarly, we can define a default user for the imported nodes.
  uid: constants/uid_root
  'body/value': Body
  'body/format': constants/restricted_html
  field_departments:
    plugin: entity_generate
    source: Department Name
    entity_type: taxonomy_term
    bundle_key: vid
    bundle: departments
    value_key: name
  field_institute:
    plugin: entity_generate
    source: Institute Name
    entity_type: taxonomy_term
    bundle_key: vid
    bundle: iit_institute
    value_key: name
  field_degree:
    plugin: entity_generate
    source: Degree
    entity_type: taxonomy_term
    bundle_key: vid
    bundle: degree
    value_key: name
dependencies:
  enforced:
    module:
      - term_migration
