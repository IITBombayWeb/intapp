<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\field\FieldConfigInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use \Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\workflow\Entity\Workflow;
use Drupal\workflow\Entity\WorkflowState;
use Drupal\workflow\Entity\WorkflowConfigTransition;
use Drupal\workflow\Entity\WorkflowTransitionInterface;
use Drupal\workflow\Controller\WorkflowTransitionListController;
use Drupal\user\Entity\user;
/**
* Implements hook_mail().
*/
function iitinap_mail($key, &$message, $params) {
 //dpm(\Drupal::currentUser());
 $options = array(
   'langcode' => $message['langcode'],
 );
 switch ($key) {
	case 'status_change':
		$message['from'] = \Drupal::config('system.site')->get('mail');
		$subject = ($params['user_subject'] != '') ? $params['user_subject'] : 'Your application '.$params['app_id'].' have new state';
		$message['subject'] = t($subject, $options);
		$message['body'][] = $params['message'];
	break;
  case 'application_created':
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $subject = ($params['user_subject'] != '') ? $params['user_subject'] : 'Congratulation, Your application created : '.$params['app_id'];
	$message['subject'] = t($subject, $options);
    $message['body'][] = $params['message'];
  break;
  case 'admin_mail':
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $subject = ($params['admin_subject'] != '') ? $params['admin_subject'] : $params['title'];
	$message['subject'] = t($subject, $options);
    $message['body'][] = $params['message'];
  break;
 }
}

/**
* Implements hook_workflow().
*/

function iitinap_workflow($op, WorkflowTransitionInterface $transition, UserInterface $user) {
	//dpm(\Drupal::config('system.site')->get('mail'));
	//$userCurrent = \Drupal::currentUser();
	//dpm($userCurrent->id());
    //$curuser = User::load($userCurrent->id());
    //dpm($curuser);
    //dpm($user->get('mail')->value);
	/*$roles = $curuser->getRoles();
	foreach($roles as $role){
	  if($role == 'office'){
	   $data = user_load_by_name($role)->getEmail();
	   dpm($data);
	  }
	}*/
  $mailConfig = \Drupal::config('workflow_mail.settings');
  $send_mail_admin = $mailConfig->get('send_mail_admin');
  $send_mail_user = $mailConfig->get('send_mail_user');
  $mail_subject_admin = $mailConfig->get('mail_subject_admin');
  $mail_subject_user = $mailConfig->get('mail_subject_user');
  $send_test_mail = $mailConfig->get('send_test_mail');
  $send_to = $mailConfig->get('send_to');
  $old_state = $transition->getFromState()->label;
  $new_state = $transition->getToState()->label;
  // Sending mail to end user
  $mailManager = \Drupal::service('plugin.manager.mail');
    if($old_state != '(Creation)') {
      $comment = $transition->getComment();
      $to = $transition->getTargetEntity()->getOwner()->getEmail();
      $module = 'iitinap';
      $entity = $transition->getTargetEntity();
      $langcode = $entity->language()->getId();
      $user_name = $transition->getTargetEntity()->getOwner()->getUsername();
      $app_id = $entity->getTranslation($langcode)->get('title')->getValue()[0]['value'];
      $nid = $entity->getTranslation($langcode)->get('field_programme')->getValue()[0]['target_id'];
      $node = Node::load($nid);
      $ownermail = $node->getOwner()->getEmail();
      $degree  = $node->getTranslation($langcode)->get('field_degree')->getValue()[0]['value'];
      $depart  = $node->getTranslation($langcode)->get('field_departments')->getValue()[0]['target_id'];
      $departs = taxonomy_term_load($depart);
      $departments = $departs->getTranslation($langcode)->get('name')->getValue()[0]['value'];
      //$application_name =  $departments = $departs->getTranslation('en')->get('name')->getValue()[0]['value']; 
      $term = $node->field_institute;
      $tax = $term->target_id;
      $ins = taxonomy_term_load($tax);
      $institute = $ins->getTranslation($langcode)->get('name')->getValue()[0]['value'];
      if($new_state == 'Application Rejected') {
        $content = 'We are sorry your application is not selected.<p></p> Comment : <b>'.$comment.'</b>';
      } else {
        $content = 'Congratulation,<br><p></p> Your aplication has changed from <b>'.$old_state.'</b> to <b>'.$new_state.'</b><p></p> Comment : <b>'.$comment.'</b>';  
      }
      if($send_mail_user == '1') {
        $params['message'] = 'Dear '.$user_name.',<br><p></p>'.$content.'<table cellpadding = "3" cellspacing = "3" ><tr><td>Application</td><td> : <b>'.$app_id.'</b></td></tr><tr><td>Instittue</td><td> : '.$institute.'</td></tr><tr><td>Degree</td><td> : '.$degree.'</td></tr><tr><td>Department</td><td> : '.$departments.'</td></tr></table> <br> Regards,<br>'.$institute;
        $key = 'status_change';
        $params['app_id'] = $app_id;
        $params['user_subject'] = $mail_subject_user;
        $send = true;
        $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
        if ($result['result'] === true) {
          drupal_set_message(t('Application status has been changed.'));
        }
      }

      if($send_mail_admin == '1') {
        $key = 'admin_mail';
        $to = $ownermail;
        $params['title'] = 'Application '.$app_id .' have new state';
        $params['admin_subject'] = $mail_subject_admin;
        $params['message'] = 'Dear Admin,<br><p></p><p>Application '.$app_id.' has changed from <b>'.$old_state.'</b> to <b>'.$new_state.'</b>';
        $send = true;
        $response = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
        if ($response['result'] === true) {
            drupal_set_message(t('Details send to Department'));
        }
      }
    }

  if($new_state == 'Need More Info'){
    $langcode = $entity->language()->getId();
    $comment = $transition->getComment();
    $entity = $transition->getTargetEntity();
    $nid_workflow = $entity->getTranslation($langcode)->get('nid')->getValue()[0]['value'];
  }
}

/**
 * Implements hook_theme().
 */
function iitinap_theme() {
  return array(
    'programme_apply_button' => array(
      'variables' => array('link' => NULL),
    ),
  );
}

function iitinap_form_alter(&$form,FormStateInterface $form_state, $form_id) {
 //global $user;
 //dpm($user->getRoles());
/* $userCurrent = \Drupal::currentUser();
    $user = User::load($userCurrent->id());
	$roles = $user->getRoles();
	foreach($roles as $role){
	  if($role == 'office'){
	   $data = user_load_by_name($role)->getEmail();
	   dpm($data);
	  }
	}*/
$current_path = \Drupal::service('path.current')->getPath();
	  if((strpos($form_id, 'transition-field-status-form')) && ($current_path == '/view-my-application-list' || strpos($current_path, 'view-application-lists'))) {
		unset($form['comment']);
		unset($form['to_sid']['#title']);
	  }
      module_load_include('inc', 'basiccart');
      $application_id = basiccart_get_cart();
      if ((isset($application_id['cart']) && is_array($application_id['cart']) && ($form['#form_id'] == 'profile_student_application__edit_form' || $form['#form_id'] == 'profile_student_application__add_form'))) {
	  
        $form['actions']['submit']['#submit'][] = "application_save_submit";
          $cart = $application_id;
    $cart_cart = $cart['cart'];
      $cart_data = array();
    $i=0;
	
    if(is_array($cart_cart) && count($cart_cart) >= 1){
    	foreach($cart_cart as $nid => $node){
            $langcode = $node->language()->getId();
			$degree = $node->getTranslation($langcode)->get('field_degree')->getValue()[0]['value'];
            $depart = $node->getTranslation($langcode)->get('field_departments')->getValue()[0]['target_id'];
			$departs = taxonomy_term_load($depart);
			$departments = $departs->getTranslation($langcode)->get('name')->getValue()[0]['value'];
			$in = $node->getTranslation($langcode)->get('field_institute')->getValue()[0]['target_id'];
			$ins = taxonomy_term_load($in);
			$institute = $ins->getTranslation($langcode)->get('name')->getValue()[0]['value'];
			$title = $node->getTranslation($langcode)->get('title')->getValue();
            $cart_data[$i] = $title[0]['value'];
			$no_of_doc = $node->getTranslation($langcode)->get('field_enter_number_of_supporting')->getValue();
            $no_doc[$i] = $no_of_doc[0]['value'];
            $doc_name = $node->getTranslation($langcode)->get('field_e')->getValue();
            $name_doc[$i] = $doc_name[0]['value'];
            $data .= '<li><div class="programs"><h4 class="programs-apply">Program : </h4>' . $cart_data[$i] .', <h4 class="programs-apply">Degree : </h4>'
			. $degree .',<h4 class="programs-apply">Departments : </h4>'
			. $departments .',<h4 class="programs-apply">Institute : </h4>'
			. $institute . "</br></div></li>";
            $i++;
        }
    }
	$j=0;
    $count = 0;
    $m=0;
        for($k=0;$k<count($no_doc);$k++){
            $name[$j] = explode(',',$name_doc[$k]);
            $count = $count + $no_doc[$k];
            $j++;
        }
        foreach($name as $key => $value){
            foreach($value as $key1 => $val){
		if(!empty($val)){            
		$push[] = $val;
		}
            }
        }
         $document = (array_values(array_unique($push)));
         for($i=0;$i<count($document);$i++){
            $sup_doc[$document[$i]] = $document[$i];
         }
		  $cardinality = count($document);
		   
		if(!empty($data)){
        $form['custom_form'] = array(
             '#type' => 'markup',
             '#markup' => '<ul>' . $data . '</ul>',
			 '#prefix' => '<b>List of programs Applied</b>',
			 '#weight' => -2,
        );
		}
		$form['custom_title'] = array(
		  '#weight' => -1,
		  '#prefix' => '<h3 class="applicant"><b>Applicant Details</b></h3>'  
		);
		if($count!=0){
		$form['document_checkbox'] = array(
            '#type' => 'checkboxes',
            '#title' => 'programme supporting specific documents:',
            '#weight' => 31,
            '#options' => $sup_doc,
			'#suffix' => '<h5><b>please select the files which you uploaded the following above</h5></b><br>',
        );
		$form['field_supporting_d']['#suffix'] = '<h5><b>Note : Please upload minimum ' . $cardinality . ' files</b></h5>';
		}
        else{
            $form['field_supporting_d']['#type'] = 'hidden';
        }
        $form['actions']['submit']['#value']="Apply";
		
		   $form['#validate'][] = 'form_validate_data1';
		   //$form['field_supporting_d']['widget']['#file_upload_description']['#cardinality']=$cardinality;
		   $form['field_supporting_d']['#no_doc'] = $cardinality;
        $form['actions']['submit']['#submit'][]='custom_form_submit';
        unset($form['actions']['set_default']);
      }
      $session = \Drupal::service('user.private_tempstore')->get('hello_world');
	$application_id =  $session->get('application_id');
	if (isset($application_id) && isset($programme_id) && ($form['#form_id'] == 'profile_student_application_edit_form')){
		$form['actions']['submit']['#submit'][] = "application_save_submit";
	}
//    if($current_path == '/view-application-lists/11'){
//  $option = array(
//	'apply_apply' => 'Apply',
//	'apply_need_more_info' => 'Need More Info',
//    'apply_details_appended' => 'Details Appended',
//	'apply_downloaded_for_department_processing' => 'Downloaded for department Processing',
//	'apply_application_rejected' => 'Application Rejected',
//	'apply_offer_given' => 'Offer Given',
//	'apply_offer_accepted' => 'Offer Accepted',
//	'apply_offer_rejected' => 'Offer Rejected',
//  );
//  $form['header']['node_bulk_form']['action']['#options'] = $option;
//  $form['header']['node_bulk_form']['actions']['submit']['#submit'][] = 'workflow_form_submit';
//  
//}  
if ($form['#form_id'] == 'node_application_edit_form') {
   
   //workflow_url_get_entity(node::load($node_id(2)));
   $sup_doc_val = explode(',',$form['field_documents_uploaded']['widget'][0]['value']['#default_value']);
	  foreach ($sup_doc_val as $key=>$val) {
		  if ($val == null){
			 unset($sup_doc_val[$key]);
		  }
	  }
	  for($i=0;$i<count($sup_doc_val);$i++){
	   $sup_doc[$i] = explode(':',$sup_doc_val[$i]);
	  }
	  for($i=0;$i<count($sup_doc);$i++){
		  for($j=0;$j<count($sup_doc[$i]);$j++){
			  $sup_documents[$sup_doc[$i][$j]] = $sup_doc[$i][$j];
		  }
	  }
	  $langcode = 'en';
	 $program_data = Node::load($form['field_programme']['widget']['#default_value'][0]);

	 $supname = $program_data->getTranslation($langcode)->get('field_e')->getValue()[0]['value'];
	 
        $val = explode(',',$supname);
        if(!empty($supname)){
		   for($i=0;$i<count($val);$i++){
			   $data[$val[$i]] = $val[$i];
		   }
		   $form['supporting_document'] = array(
			   '#type' => 'checkboxes',
			   '#title' => 'Programme Supporting Specific Documents',
			   '#options' => $data,
			   '#weight' => 30,
			   '#value' => array_intersect($sup_documents,$data),
			   '#disabled' => TRUE,
		   );
		}
  foreach($form['field_programme']['widget']['#options'] as $key => $value){
  foreach($form['field_programme']['widget']['#default_value'] as $keys => $values){
	if($key == $values) {	
	  $node = Node::load($key);
	  $degree .= $node->getTranslation('en')->get('field_degree')->getValue()[0]['value'];
	  $depart = $node->getTranslation('en')->get('field_departments')->getValue()[0]['target_id'];
	  $departs = taxonomy_term_load($depart);
	  $departments = $departs->getTranslation('en')->get('name')->getValue()[0]['value'];
	  $term = $node->field_institute;
	  $tax = $term->target_id;
	  $ins = taxonomy_term_load($tax);
      $institute .= $ins->getTranslation('en')->get('name')->getValue()[0]['value'];
	  $program .= $value;
	}
  }
  }
  $form['field_programme'] = array(
	'#type' => 'markup',
	'#markup' => '<div class="programs"><h4 class="programs-apply">Programs Applied For : </h4>'.$program.'</div>',
	'#prefix' => '<div class="application-details">',	
  );
  $form['field_institute'] = array(
	'#type' => 'markup',
	'#markup' => '<div class="programs"><h4 class="programs-apply">Institute : </h4>'.$institute.'</div>',
  );
  $form['field_degree'] = array(
	'#type' => 'markup',
	'#markup' => '<div class="programs"><h4 class="programs-apply">Degree : </h4>'.$degree.'</div>',
  );
   $form['field_departments'] = array(
	'#type' => 'markup',
	'#markup' => '<div class="programs"><h4 class="programs-apply">Department : </h4>'.$departments.'</div>',
	'#suffix' => '</div>',
  );
  	
}
	global $base_url;
	$node = \Drupal::routeMatch()->getParameter('node');
if($form_id == 'profile_student_application__form' && $current_path = '/node/'.$node.'/edit_application') {
    $form['actions']['submit']['#submit'][] = 'form_submit';
   //$entity_data = workflow_url_get_entity(Node::load($node));
   //$field_name = workflow_get_field_name($entity_data, workflow_url_get_field_name());
   //$current_sid = workflow_node_current_state($entity_data, $field_name);
   //$entity_type = 'workflow_transition';
   //loadByProperties($entity_type, $entity_id, array(), $field_name,'en','ASC','workflow_transition');
   //dpm($current_sid);
}
//if($form_id == 'workflow-transition-field-status-form--2'){
// dpm($form);
//}

if($form_id == 'basiccart_cart_form') {
    $form['buttons']['update']['#value'] = t('Apply');
    $form['#submit'][] = 'iitnap_basiccart_alter_submit'; 
    $form['actions']['submit']['#submit'][] = 'form_submit';
}
  if( $current_path =='/user/register') {
    $form['#validate'][] = 'form_validate_data2';
  }
}


function iitnap_basiccart_alter_submit(array &$form, FormStateInterface $form_state) {   
  $user = \Drupal::currentUser();
  if($user ->id()){
    $url = new Url('entity.profile.type.student_application_.user_profile_form',array("user"=>$user->id(),"profile_type" => "student_application_"));    
    $form_state->setRedirectUrl($url);
  }else{
   $url = URL::fromUserInput('/user/login/?destination=get-profile');
    $form_state->setRedirectUrl($url);
  }
}

function form_submit(array &$form, FormStateInterface $form_state) {
 if($_SERVER['HTTP_X_REQUESTED_WITH']!='XMLHttpRequest'){
	$node = \Drupal::routeMatch()->getParameter('node');
	$url = URL::fromUserInput('/node/'.$node);
    $form_state->setRedirectUrl($url);
 }
}

/**
 *Implements form_validation() for registration.
 */
function form_validate_data2($form, &$form_state){
  if(preg_match('/[^a-z-0-9_-]/i', $form['account']['name']['#value']))
  {
    $form_state->setError($form['account']['name'],"Please use - or _ character to split username");
  }
}
/**
 *Implements form_validation() for application.
 */
function form_validate_data1($form, &$form_state){

 //dpm($form['field_gender']['widget']['#default_value'][0]);
 //dpm($form['field_surname']['widget'][0]['value']['#default_value']);
 //dpm($form['field_mobile_num_com']['widget'][0]['value']['#value']);
   if($_SERVER['HTTP_X_REQUESTED_WITH']!='XMLHttpRequest'){
	if($form['document_checkbox']['#value'] != $form['document_checkbox']['#options']){
	   $form_state->setError($form['document_checkbox'],"Please select all files");
	}
   if($form['field_supporting_d']['#type']!='hidden'){
    if($form['field_supporting_d']['widget']['#file_upload_delta']<$form['field_supporting_d']['#no_doc']){
        $form_state->setError($form['field_supporting_d'],"Please upload all files");
	}
   }
   $field_first_name = $form['field_first_name']['widget'][0]['value']['#value'];
  if(empty($field_first_name)){
   $form_state->setError($form['field_first_name'],"Please fill your name");
  }
  $field_surname = $form['field_surname']['widget'][0]['value']['#value'];
  if(empty($field_surname)){
   $form_state->setError($form['field_surname'],"Please fill  surname");
  }

  if(preg_match('/[^a-z-0-9]/i', $field_first_name)){
    $form_state->setError($field_first_name,"Special characters are not allowed");
  }

  if(preg_match('/[^a-z-0-9]/i', $field_surname)){
    $form_state->setError($field_surname,"Special characters are not allowed");
  }

  if($form['field_gender']['widget']['#value']=='_none'){
   $form_state->setError($form['field_gender'],"Please select gender");
  }
  if(empty($form['field_date_of_birth']['widget'][0]['value']['#value']['date'])){
   $form_state->setError($form['field_date_of_birth'],"Please select date of birth");
  }
  $field_mobile_num_com = $form['field_mobile_num_com']['widget'][0]['value']['#value'];
  if(empty($field_mobile_num_com)){
   $form_state->setError($form['field_mobile_num_com'],"Please enter mobile number");
  }
  $field_telephone_num_com = $form['field_telephone_num_com']['widget'][0]['value']['#value'];
  if(empty($field_telephone_num_com)){
   $form_state->setError($form['field_telephone_num_com'],"Please enter phone number");
  }

  if(!is_numeric($field_mobile_num_com)){
     $form_state->setError($form['field_mobile_num_com'],"Please enter valid number");
  }

  if(!is_numeric($field_telephone_num_com)){
     $form_state->setError($form['field_telephone_num_com'],"Please enter valid number");
  }

  if(empty($form['field_pin']['widget'][0]['value']['#value'])){
    $form_state->setError($form['field_pin'],"Please enter pincode");
  }
   if(empty($form['field_pincode_school']['widget'][0]['value']['#value'])){
    $form_state->setError($form['field_pincode_school'],"Please enter pincode for school");
  }
  if(empty($form['field_state']['widget'][0]['value']['#value'])){
   $form_state->setError($form['field_state'],"Please enter state");
  }
  if(empty($form['field_state_school']['widget'][0]['value']['#value'])){
   $form_state->setError($form['field_state_school'],"Please enter state for school");
  }
  if($form['field_year_of_passing']['widget']['#value']=='_none'){
   $form_state->setError($form['field_year_of_passing'],"Please select year of passing");
  }
  if(empty($form['field_city']['widget'][0]['value']['#value'])){
   $form_state->setError($form['field_city'],"Please enter city");
  }
  if(empty($form['field_city_school']['widget'][0]['value']['#value'])){
   $form_state->setError($form['field_city_school'],"Please enter city for school");
  }
  if(empty($form['field_permanent_address']['widget'][0]['value']['#value'])){
   $form_state->setError($form['field_permanent_address'],"Please enter permanent address");
  }
  if(empty($form['field_general_documents']['widget']['#file_upload_delta'])){
   $form_state->setError($form['field_general_documents'],"Please upload general document");
  }
  if(empty($form['field_medium_of_instruction_']['widget'][0]['value']['#value'])){
   $form_state->setError($form['field_medium_of_instruction_'],"Please enter medium of instruction");
  }
  if(empty($form['field_name_of_the_board_universi']['widget'][0]['value']['#value'])){
   $form_state->setError($form['field_name_of_the_board_universi'],"Please enter name of the board");
  }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function iitinap_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  global $base_url;
  if($node->getType() == "application"){
	 //if ($display->getComponent('field_status')) {
	 // dpm($node->content['field_status']);
	 //}
	//dpm($node->content['field_status']);
	//$build['field_status'] = array(
	//  '#field_type' => 'workflow',
	//  '#bundle' => 'application',
	//  'weight' => -50,
	//);
  }
	/*if($node->getType() == "programme"){
   $anonymous = \Drupal::currentUser()->isAnonymous();
   if($anonymous) {
     drupal_set_message(t('Please login to Apply.'), 'error');
   }
   
    $build['programme_apply'] = array(
      '#link' => $anonymous ? $base_url."/user/login" : $base_url."/node/add/application/".$node->id(), 
      '#theme' => 'programme_apply_button',
      '#weight' => 100,
    );
	} */
}

//function workflow_form_submit(&$form, FormStateInterface $form_state) {
//dpm($form);
////  $nids = \Drupal::entityQuery('node')
////        ->condition('type', 'application')
////        ->execute();
////    $nodes = \Drupal::entityTypeManager()
////      ->getStorage('node')
////      ->loadMultiple($nids);
////						dpm($nodes);
//}

function application_save_submit(&$form, FormStateInterface $form_state) {

  $langcode = 'en';
  module_load_include('inc', 'basiccart');
  $application_id = basiccart_get_cart();
  $applicationArray = $application_id['cart'];
  $doc_data = '';
  for($i=0;$i<count($form['document_checkbox']['#value']);$i++){
    $doc_key = array_keys($form['document_checkbox']['#value']);
  }
  for($i=0;$i<count($doc_key);$i++){
      $doc_data = $doc_data . $doc_key[$i] . ':' .  $doc_key[$i] . ',';
  }
  foreach ($applicationArray as $key => $value) {
  // Get the Institute Id
  $institute_id = $value->getTranslation($langcode)->get('field_institute')->getValue()[0]['target_id'];
  // Get the Taxonomy details
  $institute_tid = taxonomy_term_load($institute_id);
  $institute_code = $institute_tid->getTranslation($langcode)->get('field_short_code')->getValue()[0]['value'];
  $created = date("Y").'-'.date("m");
    $node = Node::create([
      'type'        => 'application',
      'title'       => $value->getTranslation($langcode)->get('title')->getValue()[0]['value'],
	  'field_documents_uploaded' => array(
			  'value' => $doc_data,
		  ),
      'field_programme' => [
    'target_id' => $key,
    ],
    ]);
    $node->save();
    $node_id = $node->id();
    $node = Node::load($node_id);
    $new_application_id = "$institute_code-$created-$node_id";
    $node->setTitle($new_application_id);
    $node->set("field_status", 'apply_apply');
    $node->save();

    // Sending Mail 
    $mailConfig = \Drupal::config('workflow_mail.settings');
	$send_mail_admin = $mailConfig->get('send_mail_admin');
	$send_mail_user = $mailConfig->get('send_mail_user');
	$mail_subject_admin = $mailConfig->get('mail_subject_admin');
	$mail_subject_user = $mailConfig->get('mail_subject_user');
	$send_test_mail = $mailConfig->get('send_test_mail');
    //$send_test_mail = $mailConfig->get('send_test_mail');
    $send_to = $mailConfig->get('send_to');
    $mailManager = \Drupal::service('plugin.manager.mail');
    $userCurrent = \Drupal::currentUser();
    $user = user_load($userCurrent->id());
    $curr_user_name = $user->get('name')->value;
    $curr_user_mail = $user->get('mail')->value;
    $old_state = 'Created';
    $new_state = 'Apply';
    $to = $curr_user_mail;
    $module = 'iitinap';
    $pgm_id = $node->getTranslation($langcode)->get('field_programme')->getValue()[0]['target_id'];
    $programme = node_load($pgm_id);
    $ownermail = $programme->getOwner()->getEmail();
    $degree  = $programme->getTranslation($langcode)->get('field_degree')->getValue()[0]['value'];
    $depart  = $programme->getTranslation($langcode)->get('field_departments')->getValue()[0]['target_id'];
    $departs = taxonomy_term_load($depart);
    $departments = $departs->getTranslation($langcode)->get('name')->getValue()[0]['value'];
    $term = $programme->field_institute;
    $tax = $term->target_id;
    $ins = taxonomy_term_load($tax);
    $institute = $ins->getTranslation($langcode)->get('name')->getValue()[0]['value'];
    if($send_mail_user == '1') {
      $params['message'] = 'Dear '.$curr_user_name.',<br><p></p> You are successfully applied for the programme.<table cellpadding = "3" cellspacing = "3" ><tr><td>Application</td><td> : <b>'.$new_application_id.'</b></td></tr><tr><td>Instittue</td><td> : '.$institute.'</td></tr><tr><td>Degree</td><td> : '.$degree.'</td></tr><tr><td>Department</td><td> : '.$departments.'</td></tr></table> <br> Regards,<br>'.$institute;
      $key = 'application_created';
      $params['app_id'] = $new_application_id;
      $params['user_subject'] = $mail_subject_user;
      $send = true;
      $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
      if ($result['result'] === true) {
        drupal_set_message(t('Aplication details sent to your registered mail.'));
      }
    }
    // Admin side mail
    if($send_mail_admin == '1') {
      $key = 'admin_mail';
      $to = $ownermail;
      $params['title'] = 'New Application received : '.$new_application_id;
      $params['admin_subject'] = $mail_subject_admin;
      $params['message'] = 'Dear Admin,<br><p></p><p>New Application received</p><p>Appication No: '.$new_application_id.'</p>';
      $send = true;
      $response = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
      if ($response['result'] === true) {
        drupal_set_message(t('Details send to Department'));
      }
    }
  }
  // empty the  cart 
  basiccart_empty_cart();
  drupal_set_message("Successfully applied to " . count($applicationArray) . " programmes.");
  
}

function iitinap_page_attachments(array &$attachments) {
  //dpm($attachments);
  $attachments['#attached']['library'][] = 'iitinap/iitinap';
}
function iitinap_field_views_data_views_data_alter(array &$data, \Drupal\field\FieldStorageConfigInterface $field){
  //dpm($data);
}
