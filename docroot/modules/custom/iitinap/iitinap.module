<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\field\FieldConfigInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\UserInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use \Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\workflow\Entity\Workflow;
use Drupal\workflow\Entity\WorkflowState;
use Drupal\workflow\Entity\WorkflowConfigTransition;
use Drupal\workflow\Entity\WorkflowTransitionInterface;
use Drupal\workflow\Controller\WorkflowTransitionListController;
use Drupal\user\Entity\user;

use Drupal\file\Entity\File;
use Dompdf\Dompdf;
///naga june 29
use Drupal\basiccart\Controller\CartController;
use Drupal\basiccart\Utility;
use Drupal\basiccart\Form\CartForm;
///naga june 29

/**
* Implements hook_mail().
*/
function iitinap_mail($key, &$message, $params) {
       $options = array(
	 'langcode' => $message['langcode'],
       );
       switch ($key) {
	     case 'status_change':
		     $message['from'] = \Drupal::config('system.site')->get('mail');
		     $subject = ($params['user_subject'] != '') ? $params['user_subject'] : 'Your application '.$params['app_id'].' have new state';
		     $message['subject'] = t($subject, $options);
		     $message['body'][] = $params['message'];
	     break;
	     case 'application_created':
		     $message['from'] = \Drupal::config('system.site')->get('mail');
		     $subject = ($params['user_subject'] != '') ? $params['user_subject'] : 'Congratulation, Your application created : '.$params['app_id'];
		     $message['subject'] = t($subject, $options);
		     $message['body'][] = $params['message'];
	     break;
	     case 'admin_mail':
		     $message['from'] = \Drupal::config('system.site')->get('mail');
		     $subject = ($params['admin_subject'] != '') ? $params['admin_subject'] : $params['title'];
		     $message['subject'] = t($subject, $options);
		     $message['body'][] = $params['message'];
	     break;
       }
 }

/**
* Implements hook_workflow().
*/

function iitinap_workflow($op, WorkflowTransitionInterface $transition, UserInterface $user) {
  $mailConfig = \Drupal::config('workflow_mail.settings');
  $send_mail_admin = $mailConfig->get('send_mail_admin');
  $send_mail_user = $mailConfig->get('send_mail_user');
  $mail_subject_admin = $mailConfig->get('mail_subject_admin');
  $mail_subject_user = $mailConfig->get('mail_subject_user');
  $send_test_mail = $mailConfig->get('send_test_mail');
  $send_to = $mailConfig->get('send_to');
  $old_state = $transition->getFromState()->label;
  $new_state = $transition->getToState()->label;
  // Sending mail to end user
  $mailManager = \Drupal::service('plugin.manager.mail');
       if ($old_state != '(Creation)') {
	 $comment = $transition->getComment();
	 $to = $transition->getTargetEntity()->getOwner()->getEmail();
	 $module = 'iitinap';
	 $entity = $transition->getTargetEntity();
	 $langcode = $entity->language()->getId();
	 $user_name = $transition->getTargetEntity()->getOwner()->getUsername();
	 $app_id = $entity->getTranslation($langcode)->get('title')->getValue()[0]['value'];
	 $nid = $entity->getTranslation($langcode)->get('field_programme')->getValue()[0]['target_id'];
	 $node = Node::load($nid);
	 $ownermail = $node->getOwner()->getEmail();
	 $degree  = $node->getTranslation($langcode)->get('field_degree')->getValue()[0]['value'];
	 $depart  = $node->getTranslation($langcode)->get('field_departments')->getValue()[0]['target_id'];
	 $departs = taxonomy_term_load($depart);
	 $departments = $departs->getTranslation($langcode)->get('name')->getValue()[0]['value'];
	 //$application_name =  $departments = $departs->getTranslation('en')->get('name')->getValue()[0]['value']; 
	 $term = $node->field_institute;
	 $tax = $term->target_id;
	 $ins = taxonomy_term_load($tax);
	 $institute = $ins->getTranslation($langcode)->get('name')->getValue()[0]['value'];
	      if ($new_state == 'Application Rejected') {
		$content = 'We are sorry your application is not selected.<p></p> Comment : <b>'.$comment.'</b>';
	      } else {
		$content = 'Congratulation,<br><p></p> Your aplication has changed from <b>'.$old_state.'</b> to <b>'.$new_state.'</b><p></p> Comment : <b>'.$comment.'</b>';  
	      }
	      if ($send_mail_user == '1') {
		$params['message'] = 'Dear '.$user_name.',<br><p></p>'.$content.'<table cellpadding = "3" cellspacing = "3" ><tr><td>Application</td><td> : <b>'.$app_id.'</b></td></tr><tr><td>Instittue</td><td> : '.$institute.'</td></tr><tr><td>Degree</td><td> : '.$degree.'</td></tr><tr><td>Department</td><td> : '.$departments.'</td></tr></table> <br> Regards,<br>'.$institute;
		$key = 'status_change';
		$params['app_id'] = $app_id;
		$params['user_subject'] = $mail_subject_user;
		$send = true;
		$result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
		if ($result['result'] === true) {
		  drupal_set_message(t('Application status has been changed.'));
		}
	      }  
	     if ($send_mail_admin == '1') {
	       $key = 'admin_mail';
	       $to = $ownermail;
	       $params['title'] = 'Application '.$app_id .' have new state';
	       $params['admin_subject'] = $mail_subject_admin;
	       $params['message'] = 'Dear Admin,<br><p></p><p>Application '.$app_id.' has changed from <b>'.$old_state.'</b> to <b>'.$new_state.'</b>';
	       $send = true;
	       $response = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
	       if ($response['result'] === true) {
		   drupal_set_message(t('Details send to Department'));
	       }
	     }
       }

       if ($new_state == 'Need More Info'){
	 $langcode = $entity->language()->getId();
	 $comment = $transition->getComment();
	 $entity = $transition->getTargetEntity();
	 $nid_workflow = $entity->getTranslation($langcode)->get('nid')->getValue()[0]['value'];
       }
}

/**
 * Implements hook_theme().
 */
function iitinap_theme() {
  return array(
    'programme_apply_button' => array(
      'variables' => array('link' => NULL),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */

function iitinap_form_alter(&$form,FormStateInterface $form_state, $form_id) {

       //naga 
       if ($form['#form_id'] == 'workflow-transition-field-status-form--2') {	     
	    //Node id
	    $node = \Drupal::routeMatch()->getParameter('node');
	      if ($node) {
		// You can get nid and anything else you need from the node object.
		$curr_nid = $node->id();
	      }
	    $curr_state = $form['to_sid']['#default_value'];
	    //Get Current workflow State
	    $query = \Drupal::database()->select('workflow_transition_history', 'wf');
	    $query->addField('wf', 'comment');
	    $query->condition('wf.to_sid', $curr_state);
	    $query->condition('wf.from_sid', $curr_state,'!=');
	    $query->condition('wf.entity_id', $curr_nid);
	    $cur_wf_nid = $query->execute()->fetchField();
	    $wf_curr_st = WorkflowState::load($curr_state);
	    $wf_curr_st_lab =$wf_curr_st->label;
	    //From Field tile alter
	    $form['to_sid']['#options'][$curr_state]= 'Please Select';
	    $form['to_sid']['#title'] = 'Change status to';
	    $form['comment']['#title'] ='Additional comments';
	    $form['actions']['submit']['#value']='Update application status';
	  
	    if (!empty ($wf_curr_st_lab)) {
		     $form['field_current_status'] = array (
			   '#type' => 'item',
			   '#title' => t('Current status'),
			   '#prefix' => '<div class="example-wrapper">',
			   '#suffix' => '</div>',
			   '#markup' => t("<br>".$wf_curr_st_lab),
			   '#weight' => '0',
		     );
		     $form['field_current_comment'] = array (
			   '#type' => 'item',
			   '#title' => t('Status description'),
			   '#markup' => t("<br>". $cur_wf_nid),
			   '#weight' => '0',
		     );
	      }
       }   
       //naga 
       if ($form['#form_id'] == 'search_api_page_block_form'){
	    $form['#prefix']="<div style = 'display:none'>";
            $form['#suffix']="</div>";  
       }
       $current_path = \Drupal::service('path.current')->getPath();
       if ((strpos($form_id, 'transition-field-status-form')) && ($current_path == '/view-my-application-list' || strpos($current_path, 'view-application-lists'))) {
	     unset($form['comment']);
	     unset($form['to_sid']['#title']);
       }
       
       module_load_include('inc', 'basiccart');
       $application_id = basiccart_get_cart();
       if ((isset($application_id['cart']) && is_array($application_id['cart']) && ($form['#form_id'] == 'profile_student_application__edit_form' || $form['#form_id'] == 'profile_student_application__add_form'))) {
	      $cartform = new CartForm();
	      /*
	      ///////// naga paypal integration
	      $Utility = new Utility();
	      $cartform = new CartForm();
	      $cart = $Utility::get_cart();
	      $config = $Utility::cart_settings();  
	      $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();   
	      $user = \Drupal::currentUser();
	      if ($user ->id()){
		     $price = $Utility::get_total_price();
		     $total = $Utility::price_format($price->total);
		     if (empty($_GET['tx'])){
			    if($price->total > 0) { 
				    $form['#action'] ='https://www.sandbox.paypal.com/cgi-bin/webscr';
			    }
		     }else {
			    $form['#action'] ='/user/'.$user->id().'/student_application_';
		     }
	      }else {
		     $form['#action'] = '/user/login/?destination=get-profile';
	      } 
	      $form['business'] = array(
		     '#type' => 'textfield',
		     '#value' => 'malathi.s@unimity.com',
		     '#name' => "business",
	      );
	      $form['cmd'] = array(
		     '#type' => 'textfield',
		     '#value' => '_cart',
		     '#name' => "cmd",
	      );
	      $form['upload'] = array(
		     '#type' => 'textfield',
		     '#value' => '1',
		     '#name' => "upload",
	      );  	     
	      foreach ($cart['cart_quantity'] as $pgm_nid => $node) {	  
		     $node_load = node::load($pgm_nid);
		     $iit_name = $node_load->getTranslation('en')->get('field_institute')->getValue()[0]['target_id'];
		     $list_of_iits[]=$iit_name;
	      }
	      $filtr_iits = array_unique($list_of_iits);
	      foreach($filtr_iits as $key => $tax_term){
		     $tax_term_load = taxonomy_term_load($tax_term);
		     $institute_price = $tax_term_load->getTranslation('en')->get('field_iit_app_price')->getValue()[0]['value'];
		     $iit = $tax_term_load->getTranslation('en')->get('name')->getValue()[0]['value'];
	      }
	      
	      $c = 1;
	      foreach($filtr_iits as $key => $tax_term){
		     $tax_term_load = taxonomy_term_load($tax_term);
		     $institute_price = $tax_term_load->getTranslation('en')->get('field_iit_app_price')->getValue()[0]['value'];
		     $iit = $tax_term_load->getTranslation('en')->get('name')->getValue()[0]['value'];
		     $form['item_name_'.$c] = array(
			    '#type' => 'textfield',
			    '#value' => $iit,
			    '#name' => "item_name_".$c,
		     );
		     $form['item_number_'.$c] = array(
			    '#type' => 'textfield',
			    '#value' => 450,
			    '#name' => "item_number_".$c,
		     );
		      $form['amount_'.$c] = array(
			    '#type' => 'textfield',
			    '#value' => (!empty($institute_price) ? $institute_price : 0),
			    '#name' => "amount_".$c,
		     );
		     $c++;
	      }
	      $form['invoice'] = array(
		     '#type' => 'textfield',
		     //'#value' => ($_GET['cc'] || $_REQUEST['cc'])?$_GET['cc'].'_'.$_REQUEST['cc']:'1',
		     '#value' => '457',
		     '#name' => "userid",
	      );
	      $form['custom'] = array(
		     '#type' => 'textfield',
		     //'#value' => ($_GET['cc'] || $_REQUEST['cc'])?$_GET['cc'].'_'.$_REQUEST['cc']:'1',
		     '#value' => '799',
		     '#name' => "userid",
	      );
	      $form['cpp_header_image'] = array(
		     '#type' => 'textfield',
		     '#value' => 'http://www.phpgang.com/wp-content/uploads/gang.jpg',
		     '#name' => "cpp_header_image",
	      );
	      $form['no_shipping'] = array(
		     '#type' => 'textfield',
		     '#value' => '1',
		     '#name' => "no_shipping",
	      );
	      $form['currency_code'] = array(
		     '#type' => 'textfield',
		     '#value' => 'USD',
		     '#name' => "currency_code",
	      );
	      $form['handling'] = array(
		     '#type' => 'textfield',
		     '#value' => '0',
		     '#name' => "handling",
	      );
	      $form['cancel_return'] = array(
		     '#type' => 'textfield',
		     '#value' => 'http://iitinapdev.unimity.com/user/'.$user->id().'/student_application_',
		     '#name' => "cancel_return",
	      );
	      $form['return'] = array(
		     '#type' => 'textfield',
		     '#value' => 'http://iitinapdev.unimity.com/user/'.$user->id().'/student_application_',
		     '#name' => "return",
	      );
       */
	      // Total price.
	      $form['total_price'] = array(
		     '#markup' => $cartform->get_total_price_markup(),
		     '#markup' => 'welcome',
		     '#prefix' => '<div class="basiccart-cart basiccart-grid bascart-totl">',
		     '#suffix' => '</div>',
		     // '#theme' => 'cart_total_price',
	      ); 
       //Custom Submit 	  
       $form['actions']['submit']['#submit'][] = "application_save_submit";
          $cart = $application_id;
          $cart_cart = $cart['cart'];
	  $cart_data = array();
          $i=0;
       if (is_array($cart_cart) && count($cart_cart) >= 1) {
	      foreach($cart_cart as $nid => $node){
		    $langcode = $node->language()->getId();
		    $degree = $node->getTranslation($langcode)->get('field_degree')->getValue()[0]['value'];
		    $depart = $node->getTranslation($langcode)->get('field_departments')->getValue()[0]['target_id'];
		    $specialisation = $node->getTranslation($langcode)->get('field_specialisation')->getValue()[0]['value'];
		    $departs = taxonomy_term_load($depart);
		    $departments = $departs->getTranslation($langcode)->get('name')->getValue()[0]['value'];
		    $in = $node->getTranslation($langcode)->get('field_institute')->getValue()[0]['target_id'];
		    $ins = taxonomy_term_load($in);
		    $institute = $ins->getTranslation($langcode)->get('name')->getValue()[0]['value'];
		    $title = $node->getTranslation($langcode)->get('title')->getValue();
		    $cart_data[$i] = $title[0]['value'];
		    $no_of_doc = $node->getTranslation($langcode)->get('field_enter_number_of_supporting')->getValue();
		    $no_doc[$i] = $no_of_doc[0]['value'];
		    $doc_name = $node->getTranslation($langcode)->get('field_e')->getValue();
		    $name_doc[$i] = $doc_name[0]['value'];
		    $pgm_apply[] = array($institute,$departments,$degree,$specialisation);
		    $data .= '<li><div class="programs"><h4 class="programs-apply">Program : </h4>' . $cart_data[$i] .', <h4 class="programs-apply">Degree : </h4>'
			      . $degree .',<h4 class="programs-apply">Departments : </h4>'
			      . $departments .',<h4 class="programs-apply">Institute : </h4>'
			      . $institute . "</br></div></li>";
		    $i++;
	      }
       }
       $j=0;
       $count = 0;
       $m=0;
       for ($k=0;$k<count($no_doc);$k++) {
	      $name[$j] = explode(',',$name_doc[$k]);
	      $count = $count + $no_doc[$k];
	      $j++;
       }
       foreach ($name as $key => $value) {
	      foreach ($value as $key1 => $val) {
		     if (!empty($val)) {            
			$push[] = $val;
		     }
	      }
       }
       $document = (array_values(array_unique($push)));
       for ($i=0;$i<count($document);$i++) {
	      $sup_doc[$document[$i]] = $document[$i];
       }
       $cardinality = count($document);	   
       if (!empty($data)) {
	      $form['custom_form'] = array(
		   '#type' => 'markup',
		   '#markup' => '<ul>' . $data . '</ul>',
		   '#$pgm_apply' => $pgm_apply,
		   '#prefix' => '<b>List of programs Applied</b>',
		   '#weight' => -2,
	      );
       }
	      $form['custom_title'] = array(
		'#weight' => -1,
		'#prefix' => '<h3 class="applicant"><b>Applicant Details</b></h3>'  
	      );
       if ($count!=0) {
	      $form['document_checkbox'] = array(
		     '#type' => 'checkboxes',
		     '#title' => 'programme supporting specific documents:',
		     '#weight' => 31,
		     '#options' => $sup_doc,
		     '#suffix' => '<h5><b>please select the files which you uploaded the following above</h5></b><br>',
	      );
	      $form['field_supporting_d']['#suffix'] = '<h5><b>Note : Please upload minimum ' . $cardinality . ' files</b></h5>';
       }else {
	      $form['field_supporting_d']['#type'] = 'hidden';
       }
	      $form['actions']['submit']['#value']="Apply";	
	      $form['#validate'][] = 'form_validate_data1';
	      //$form['field_supporting_d']['widget']['#file_upload_description']['#cardinality']=$cardinality;
	      $form['field_supporting_d']['#no_doc'] = $cardinality;
	      $form['actions']['submit']['#submit'][]='custom_form_submit';
	      unset($form['actions']['set_default']);
       }
       $session = \Drupal::service('user.private_tempstore')->get('hello_world');
       $application_id =  $session->get('application_id');
       if (isset($application_id) && isset($programme_id) && ($form['#form_id'] == 'profile_student_application_edit_form')) {
	     // $form['#submit'][] = "application_save_submit";
	      $form['actions']['submit']['#submit'][] = "application_save_submit";
       }

       if ($form['#form_id'] == 'node_application_edit_form') {
	      $sup_doc_val = explode(',',$form['field_documents_uploaded']['widget'][0]['value']['#default_value']);
	      foreach ($sup_doc_val as $key=>$val) {
		      if ($val == null){
			     unset($sup_doc_val[$key]);
		      }
	      }
	      for($i=0;$i<count($sup_doc_val);$i++){
	       $sup_doc[$i] = explode(':',$sup_doc_val[$i]);
	      }
	      for($i=0;$i<count($sup_doc);$i++){
		      for($j=0;$j<count($sup_doc[$i]);$j++){
			      $sup_documents[$sup_doc[$i][$j]] = $sup_doc[$i][$j];
		      }
	      }
	      $langcode = 'en';
	      $program_data = Node::load($form['field_programme']['widget']['#default_value'][0]);
	      $supname = $program_data->getTranslation($langcode)->get('field_e')->getValue()[0]['value']; 
	      $val = explode(',',$supname);
	      if(!empty($supname)){
		     for($i=0;$i<count($val);$i++){
			    $data[$val[$i]] = $val[$i];
		     }
		     $form['supporting_document'] = array(
			    '#type' => 'checkboxes',
			    '#title' => 'Programme Supporting Specific Documents',
			    '#options' => $data,
			    '#weight' => 30,
			    '#value' => array_intersect($sup_documents,$data),
			    '#disabled' => TRUE,
		     );
	      }
	      foreach ($form['field_programme']['widget']['#options'] as $key => $value){
		   foreach ($form['field_programme']['widget']['#default_value'] as $keys => $values){
			    if ($key == $values) {	
			       $node = Node::load($key);
			       $degree .= $node->getTranslation('en')->get('field_degree')->getValue()[0]['value'];
			       $depart = $node->getTranslation('en')->get('field_departments')->getValue()[0]['target_id'];
			       $departs = taxonomy_term_load($depart);
			       $departments = $departs->getTranslation('en')->get('name')->getValue()[0]['value'];
			       $term = $node->field_institute;
			       $tax = $term->target_id;
			       $ins = taxonomy_term_load($tax);
			       $institute .= $ins->getTranslation('en')->get('name')->getValue()[0]['value'];
			       $program .= $value;
			    }
		     }
	      }
	      $form['field_programme'] = array(
		    '#type' => 'markup',
		    '#markup' => '<div class="programs"><h4 class="programs-apply">Programs Applied For : </h4>'.$program.'</div>',
		    '#prefix' => '<div class="application-details">',	
	      );
	      $form['field_institute'] = array(
		    '#type' => 'markup',
		    '#markup' => '<div class="programs"><h4 class="programs-apply">Institute : </h4>'.$institute.'</div>',
	      );
	      $form['field_degree'] = array(
		    '#type' => 'markup',
		    '#markup' => '<div class="programs"><h4 class="programs-apply">Degree : </h4>'.$degree.'</div>',
	      );
	      $form['field_departments'] = array(
		    '#type' => 'markup',
		    '#markup' => '<div class="programs"><h4 class="programs-apply">Department : </h4>'.$departments.'</div>',
		    '#suffix' => '</div>',
	      );
  	
       }
       global $base_url;
       $node = \Drupal::routeMatch()->getParameter('node');
       if ($form_id == 'profile_student_application__form' && $current_path = '/node/'.$node.'/edit_application') {
	      $form['actions']['submit']['#submit'][] = 'form_submit';
       }
       if ($form_id == 'basiccart_cart_form') {
	      $form['buttons']['update']['#value'] = t('Apply');
	      $form['#submit'][] = 'iitnap_basiccart_alter_submit'; 
	      $form['actions']['submit']['#submit'][] = 'form_submit';
       }
       if ( $current_path =='/user/register') {
	      $form['#validate'][] = 'form_validate_data2';
       }
}


/**
 *Implements form_validation() for registration.
 */
function form_validate_data2($form, &$form_state){
       if (preg_match('/[^a-z-0-9_-]/i', $form['account']['name']['#value'])) {
	 $form_state->setError($form['account']['name'],"Please use - or _ character to split username");
       }
}
/**
 *Implements form_validation() for application.
 */
function form_validate_data1($form, &$form_state) {
   if($_SERVER['HTTP_X_REQUESTED_WITH']!='XMLHttpRequest') {
       if($form['document_checkbox']['#value'] != $form['document_checkbox']['#options']) {
	  $form_state->setError($form['document_checkbox'],"Please select all files");
       }
       if($form['field_supporting_d']['#type']!='hidden'){
	if($form['field_supporting_d']['widget']['#file_upload_delta']<$form['field_supporting_d']['#no_doc']) {
	    $form_state->setError($form['field_supporting_d'],"Please upload all files");
	    }
       }
       $field_first_name = $form['field_first_name']['widget'][0]['value']['#value'];
       if(empty($field_first_name)){
	$form_state->setError($form['field_first_name'],"Please fill your name");
       }
       $field_surname = $form['field_surname']['widget'][0]['value']['#value'];
       if(empty($field_surname)){
	$form_state->setError($form['field_surname'],"Please fill  surname");
	//$form_state->setErrorByName('field_surname',t("Please fill  surname"));
       }
       if(preg_match('/[^a-z-0-9]/i', $field_first_name)){
	 $form_state->setError($field_first_name,"Special characters are not allowed");
       }
       if(preg_match('/[^a-z-0-9]/i', $field_surname)){
	 $form_state->setError($field_surname,"Special characters are not allowed");
       }
       if($form['field_gender']['widget']['#value']=='_none'){
	$form_state->setError($form['field_gender'],"Please select gender");
       }
       if(empty($form['field_date_of_birth']['widget'][0]['value']['#value']['date'])){
	$form_state->setError($form['field_date_of_birth'],"Please select date of birth");
       }
       $field_mobile_num_com = $form['field_mobile_num_com']['widget'][0]['value']['#value'];
       if(empty($field_mobile_num_com)){
	$form_state->setError($form['field_mobile_num_com'],"Please enter mobile number");
       }
       $field_telephone_num_com = $form['field_telephone_num_com']['widget'][0]['value']['#value'];
       if(empty($field_telephone_num_com)){
	$form_state->setError($form['field_telephone_num_com'],"Please enter phone number");
       }
       if(!is_numeric($field_mobile_num_com)){
	  $form_state->setError($form['field_mobile_num_com'],"Please enter valid number");
       }
       if(!is_numeric($field_telephone_num_com)){
	  $form_state->setError($form['field_telephone_num_com'],"Please enter valid number");
       }
       if(empty($form['field_pin']['widget'][0]['value']['#value'])){
	 $form_state->setError($form['field_pin'],"Please enter pincode");
       }
	if(empty($form['field_pincode_school']['widget'][0]['value']['#value'])){
	 $form_state->setError($form['field_pincode_school'],"Please enter pincode for school");
       }
       if(empty($form['field_state']['widget'][0]['value']['#value'])){
	$form_state->setError($form['field_state'],"Please enter state");
       }
       if(empty($form['field_state_school']['widget'][0]['value']['#value'])){
	$form_state->setError($form['field_state_school'],"Please enter state for school");
       }
       if($form['field_year_of_passing']['widget']['#value']=='_none'){
	$form_state->setError($form['field_year_of_passing'],"Please select year of passing");
       }
       if(empty($form['field_city']['widget'][0]['value']['#value'])){
	$form_state->setError($form['field_city'],"Please enter city");
       }
       if(empty($form['field_city_school']['widget'][0]['value']['#value'])){
	$form_state->setError($form['field_city_school'],"Please enter city for school");
       }
       if(empty($form['field_permanent_address']['widget'][0]['value']['#value'])){
	$form_state->setError($form['field_permanent_address'],"Please enter permanent address");
       }
       // if(empty($form['field_general_documents']['widget']['#file_upload_delta'])){
       //  $form_state->setError($form['field_general_documents'],"Please upload general document");
       // }
       if(empty($form['field_medium_of_instruction_']['widget'][0]['value']['#value'])){
	$form_state->setError($form['field_medium_of_instruction_'],"Please enter medium of instruction");
       }
       if(empty($form['field_name_of_the_board_universi']['widget'][0]['value']['#value'])){
	$form_state->setError($form['field_name_of_the_board_universi'],"Please enter name of the board");
       }
    }
 }
 
 /*
 * Implements hook_alter_submit().
 */

function iitnap_basiccart_alter_submit(array &$form, FormStateInterface $form_state) {   
       $user = \Drupal::currentUser();
       if ($user ->id()) {
	      $url = new Url('entity.profile.type.student_application_.user_profile_form',array("user"=>$user->id(),"profile_type" => "student_application_"));    
	      $form_state->setRedirectUrl($url);
       }else {
	      $url = URL::fromUserInput('/user/login/?destination=get-profile');
	      $form_state->setRedirectUrl($url);
       }
}

function form_submit(array &$form, FormStateInterface $form_state) {
       if($_SERVER['HTTP_X_REQUESTED_WITH']!='XMLHttpRequest'){
	      $node = \Drupal::routeMatch()->getParameter('node');
	      $url = URL::fromUserInput('/node/'.$node);
	      $form_state->setRedirectUrl($url);
       }
}

function application_save_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
        $form_state->setRedirect('paypal.success');
 return;
       /*
       $langcode = 'en';
       module_load_include('inc', 'basiccart');
       $application_id = basiccart_get_cart();
       $applicationArray = $application_id['cart'];
       $doc_data = '';
       for($i=0;$i<count($form['document_checkbox']['#value']);$i++){
	      $doc_key = array_keys($form['document_checkbox']['#value']);
       }
       for($i=0;$i<count($doc_key);$i++){
	   $doc_data = $doc_data . $doc_key[$i] . ':' .  $doc_key[$i] . ',';
       }
        ///naga 23-05-17
       foreach ($applicationArray as $key => $value) {
	      $username = \Drupal::currentUser()->getUsername();
	      $account = \Drupal::currentUser()->id();
	      $current_date = format_date(time(), 'custom', 'dmY hms');
	      //Image code 
	      $uid = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
	      $user_fid = $uid->get('user_picture')->getValue();
	      $fid = $user_fid[0]['target_id'];
	      $file = \Drupal\file\Entity\File::load($fid);
	      $path = $file->uri->value;
	      $test = explode('//' , $path);
	      $path_array = $test[1];
	      $base_path = 'sites/default/files/'.$path_array;
	      $image = '<img src = "'.$base_path.'" alt="My Logo" />';
	      $default_image = 'sites/default/files/pictures/Icon-user.png';
	      $first_name = $form_state->getValue('field_first_name')[0]['value'];
	      $sur_name = $form_state->getValue('field_surname')[0]['value']; 
	      $gender = $form_state->getValue('field_gender')[0]['value'];
	      $nationality = $form_state->getValue('field_nationality')[0]['value'];
	      $dob = $form_state->getValue('field_date_of_birth')[0]['value'];
	      $field_permanent_address = $form_state->getValue('field_permanent_address')[0]['value'];
	      $fpa_city = $form_state->getValue('field_city')[0]['value'];
	      $fpa_state = $form_state->getValue('field_state')[0]['value'];
	      $fpa_country = $form_state->getValue('field_country')[0]['value'];
	      $fpa_pin = $form_state->getValue('field_pin')[0]['value'];
	      $fpa_mob_num = $form_state->getValue('field_mobile_num_com')[0]['value'];
	      $fpa_pho_num = $form_state->getValue('field_telephone_num_com')[0]['value'];
	      $email_id = $form_state->getValue('field_email_id')[0]['value'];
	      $qualify_exam = $form_state->getValue('field_name_of_the_qualifying_exa')[0]['value'];
	      $board_univ = $form_state->getValue('field_name_of_the_board_universi')[0]['value'];
	      $year_of_passing = $form_state->getValue('field_year_of_passing')[0]['value'];
	      $school_lst_stud = $form_state->getValue('field_school')[0]['value'];
	      $ed_city = $form_state->getValue('field_city_school')[0]['value'];
	      $ed_state = $form_state->getValue('field_state_school')[0]['value'];
	      $ed_pin = $form_state->getValue('field_pincode_school')[0]['value'];
	      $ed_country = $form_state->getValue('field_country_school')[0]['value'];
	      $ed_md_inst = $form_state->getValue('field_medium_of_instruction_')[0]['value'];
	      // Generate Programs Applied table.
	      $pgm_apply = $form['custom_form']['#$pgm_apply'];
	      $perform_pgm_apply_result = "<table>
		    <tr>
		      <td>Institute</td>
		      <td>Department</td>
		      <td>Degree</td>
		      <td>Specialisation</td>
		    </tr>";
	      for($i = 0; $i < count($pgm_apply); $i++) {
		     $perform_pgm_apply_result .= "<tr>";
		     foreach($pgm_apply[$i] as $keys => $values) {
			    $perform_pgm_apply_result .= "<td>$values</td>";
		     }
		     $perform_pgm_apply_result .= "</tr>";
	      }
	      $perform_pgm_apply_result .= "</table>";
	      // Generate Performance Competitive table.
	      $perform_competitive = $form_state->getValue('field_performance_in_competitive');
	      $perform_competitive_result = "<table>";
	      $competitive_array = $perform_competitive[0]['tablefield']['table'];
	      for($i = 0; $i < count($competitive_array); $i++) {
		     $perform_competitive_result .= "<tr>";
		     foreach($competitive_array[$i] as $key1 => $value1) {
			    $perform_competitive_result .= "<td>$value1</td>";
		     }
		     $perform_competitive_result .= "</tr>";
	      }
	      $perform_competitive_result .= "</table>";
	      // Generate Academic Records table.
	      $academic_record = $form_state->getValue('field_details_of_academic_record');
	      $academic_record_result = "<table>";
	      $academic_record_array = $academic_record[0]['tablefield']['table'];
	      for($i = 0; $i < count($academic_record_array); $i++) {
		     $academic_record_result .= "<tr>";
		     foreach($academic_record_array[$i] as $key2 => $value2) {
		       $academic_record_result .= "<td>$value2</td>";
		     }
		     $academic_record_result .= "</tr>";
	      }
	      $academic_record_result .= "</table>";
	      // Generate Research Professional table.
	      $research_professional = $form_state->getValue('field_research_professional_expe');
	      $research_professional_result = "<table>";
	      $research_professional_array = $research_professional[0]['tablefield']['table'];
	      for($i = 0; $i < count($research_professional_array); $i++) {
		     $research_professional_result .= "<tr>";
		     foreach($research_professional_array[$i] as $key3 => $value3) {
		       $research_professional_result .= "<td>$value3</td>";
		     }
		     $research_professional_result .= "</tr>";
	      }
	      $research_professional_result .= "</table>";
	      // Generate Employment Details table.
	      $employment_details = $form_state->getValue('field_employment_details');
	      $employment_details_result = "<table>";
	      $employment_details_array = $employment_details[0]['tablefield']['table'];
	      for($i = 0; $i < count($employment_details_array); $i++) {
		     $employment_details_result .= "<tr>";
		     foreach($employment_details_array[$i] as $key4 => $value4) {
		       $employment_details_result .= "<td>$value4</td>";
		     }
		    $employment_details_result .= "</tr>";
	      }
	      $employment_details_result .= "</table>";
	      // HTML Structure for Application pdf.
	      $html = '<!DOCTYPE html>
		     <html>
		       <head>
			 <title></title>
			    <style>
				   body {
					  margin: 0 auto;
					  max-width: 1200px;
					  font-size: 14px;
				   }
				   .middle {
					  text-align: center;
				   }
				   table, td, th {
					  border: 1px solid black;
				   }
				   table {
					  border-collapse: collapse;
				   }
				   table tr:first-child td {
					  background-color: #D8D8D8;
					  text-align: left;
				   }
				   td { 
					  padding: 5px 10px;
				   }
				   .alm {
					  display:inline-block;
				   }
				   .width_75 {
					  width:75%;
				   }
				   .width_25 {
				    width:25%;
				   }
				   .width_50 {
					  width:50%;
				   }
				   .label {
					  display: inline-block;
					  width: 100px;
					  text-align: left;
				   }
				   .ml {
					  margin-left : 5px;
				   }
			    </style>
		       </head>
			  <body>
			    <div class="header middle">
				   <h2>International Student Application to PG Programs 2017</h2>
			    </div>
			    <div class="address-wrap">
			      <div class="addr-inner-wrap alm width_75">
				   <div class="addr-title"><h4>'.$first_name.' '.$sur_name.'</h4></div>
				   <div class="alm width_50"><span class="label">Mobile:</span> <span class="ml">'.$fpa_mob_num.'</span></div>
				   <div class="alm width_50"><span class="label">Email:</span> <span class="ml">'.$email_id.'</span></div>
				   <div><span class="label">Communication address:</span> <span class="ml">'.$field_permanent_address.','.$fpa_city.'-'.$fpa_pin.','.$fpa_state.','.$fpa_country.'</span></div>  
			      </div>
			      <div class="prof-img alm width_25">'.$image.'</div>
			      <div class="alm width_25">'.$gender.'</div>
			      <div class="alm width_25">'.$dob.'</div>
			    </div>
			    <div class="main-container">
			      <h3>Programs Applied</h3> '.$perform_pgm_apply_result.'
			      <h3>Performance in Competitive Examination</h3>'.$perform_competitive_result.'
			      <h3>Details of Academic Record (Secondary onwards)</h3>'.$academic_record_result.'
			      <h3>Research/ Professional Experience, Papers published etc. (upload a separate pdf for details, if required)</h3>'.$research_professional_result.'
			      <h3>Employment details</h3>'.$employment_details_result.'
			    </div>
			    <footer>
			      <div class="foot clearfix">
				<div class="f-left">
				  <label class="label"></label>
			        </div>
				<div class="f-right">
				  <label class="label"></label> 
			        </div>
			      </div>
			    </footer>
			 </body>
		     </html>';
	      // Instantiate and use the dompdf class
	      $dompdf = new Dompdf();
	      $dompdf->loadHtml($html);
	      // Setup the paper size and orientation
	      $dompdf->setPaper('A4', 'portrait');
	      // Render the HTML as PDF
	      $dompdf->render();
	      $pdfoutput = $dompdf->output();
	      //$cart_value = new CartController();   
	      //$status1 = $cart_value::transaction();	  
	      // Get the Institute Id
	      $institute_id = $value->getTranslation($langcode)->get('field_institute')->getValue()[0]['target_id'];
	      // Get the Taxonomy details
	      $institute_tid = taxonomy_term_load($institute_id);
	      $institute_code = $institute_tid->getTranslation($langcode)->get('field_short_code')->getValue()[0]['value'];
	      $created = date("Y").'-'.date("m");
	      $node = Node::create([
			    //'field_application_path' => $application_path,
			    'type'        => 'application',
			    'title'       => $value->getTranslation($langcode)->get('title')->getValue()[0]['value'],
			    'field_documents_uploaded' => array('value' => $doc_data,),
			    'field_programme' => ['target_id' => $key,],
		     ]);
	      $node->save();
	      $node_id = $node->id();
	      //pdf
	      $filename = 'public://applications/'. $username . '_' . $account . '_' .  $node_id . '.pdf';
	      //$filename = 'public://applications/'. $status1 . '_' . $account . '_' .  $node_id . '.pdf';
	      $file = file_unmanaged_save_data($pdfoutput, $filename, FILE_EXISTS_REPLACE);
	      $node = Node::load($node_id);
	      $new_application_id = "$institute_code-$created-$node_id";
	      $node->setTitle($new_application_id);
	      $node->set("field_status", 'apply_apply');
	      $node->set("field_application_path",$filename);
	      $node->save();
	      // Sending Mail 
	      $mailConfig = \Drupal::config('workflow_mail.settings');
	      $send_mail_admin = $mailConfig->get('send_mail_admin');
	      $send_mail_user = $mailConfig->get('send_mail_user');
	      $mail_subject_admin = $mailConfig->get('mail_subject_admin');
	      $mail_subject_user = $mailConfig->get('mail_subject_user');
	      $send_test_mail = $mailConfig->get('send_test_mail');
	      //$send_test_mail = $mailConfig->get('send_test_mail');
	      $send_to = $mailConfig->get('send_to');
	      $mailManager = \Drupal::service('plugin.manager.mail');
	      $userCurrent = \Drupal::currentUser();
	      $user = user_load($userCurrent->id());
	      $curr_user_name = $user->get('name')->value;
	      $curr_user_mail = $user->get('mail')->value;
	      $old_state = 'Created';
	      $new_state = 'Apply';
	      $to = $curr_user_mail;
	      $module = 'iitinap';
	      $pgm_id = $node->getTranslation($langcode)->get('field_programme')->getValue()[0]['target_id'];
	      $programme = node_load($pgm_id);
	      $ownermail = $programme->getOwner()->getEmail();
	      $degree  = $programme->getTranslation($langcode)->get('field_degree')->getValue()[0]['value'];
	      $depart  = $programme->getTranslation($langcode)->get('field_departments')->getValue()[0]['target_id'];
	      $departs = taxonomy_term_load($depart);
	      $departments = $departs->getTranslation($langcode)->get('name')->getValue()[0]['value'];
	      $term = $programme->field_institute;
	      $tax = $term->target_id;
	      $ins = taxonomy_term_load($tax);
	      $institute = $ins->getTranslation($langcode)->get('name')->getValue()[0]['value'];
	      if($send_mail_user == '1') {
		$params['message'] = 'Dear '.$curr_user_name.',<br><p></p> You are successfully applied for the programme.<table cellpadding = "3" cellspacing = "3" ><tr><td>Application</td><td> : <b>'.$new_application_id.'</b></td></tr><tr><td>Instittue</td><td> : '.$institute.'</td></tr><tr><td>Degree</td><td> : '.$degree.'</td></tr><tr><td>Department</td><td> : '.$departments.'</td></tr></table> <br> Regards,<br>'.$institute;
		$key = 'application_created';
		$params['app_id'] = $new_application_id;
		$params['user_subject'] = $mail_subject_user;
		$send = true;
		$result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
		     if ($result['result'] === true) {
		       drupal_set_message(t('Aplication details sent to your registered mail.'));
		     }
	      }
	      // Admin side mail
	      if($send_mail_admin == '1') {
		$key = 'admin_mail';
		$to = $ownermail;
		$params['title'] = 'New Application received : '.$new_application_id;
		$params['admin_subject'] = $mail_subject_admin;
		$params['message'] = 'Dear Admin,<br><p></p><p>New Application received</p><p>Appication No: '.$new_application_id.'</p>';
		$send = true;
		$response = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
		     if ($response['result'] === true) {
		       drupal_set_message(t('Details send to Department'));
		     }
	      }
        
       }
   // empty the  cart  
   basiccart_empty_cart();
   drupal_set_message("Successfully applied to " . count($applicationArray) . " programmes.");
   */
 }
/*
 * hook_page_attachments
 */
function iitinap_page_attachments(array &$attachments) {
  //dpm($attachments);
  $attachments['#attached']['library'][] = 'iitinap/iitinap';
}
/**
 * Implements field_views_data_views_data_alter().
 */
function iitinap_field_views_data_views_data_alter(array &$data, \Drupal\field\FieldStorageConfigInterface $field){
  //dpm($data);
}

/**
 * Implements hook_ENTITY_TYPE_view() for node entities.
 */
function iitinap_node_view(array &$build, EntityInterface $node, EntityViewDisplayInterface $display, $view_mode) {
       global $base_url;
       if($node->getType() == "application"){
        // Custom code
       }
}

/*
 * Implements hook_menu_local_tasks_alter().
 */
function iitinap_menu_local_tasks_alter(&$data, $route_name) {
       $data['tabs'][0]['entity.node.workflow_history']['#link']['title'] = "History";
}

/**
 * Implements hook_local_tasks_alter() for node entities.
 */
function iitinap_local_tasks_alter(&$local_tasks) {
       unset($local_tasks['entity.comment.delete_form_tab']);
       unset($local_tasks['devel.entities:block.devel_tab']);
	    /*  devel.entities:block.devel_load_tab
       devel.entities:block_content_type.devel_tab*/
       // Change 'Results' route to display the results 'Table'.
       $local_tasks['entity.webform.results']['route_name'] = 'entity.webform.results_table';
       // Move the 'Table' sub task to be first.
       $local_tasks['entity.webform.results_table']['weight'] = -100;
       // OPTIONAL: Remove the 'Submissions' task.
       unset($local_tasks['entity.webform.results_submissions']);
       // Apply the same changes the Webform node local tasks.
       if (\Drupal::moduleHandler()->moduleExists('webform_node')) {
	 $local_tasks['entity.node.webform.results']['route_name'] = 'entity.node.webform.results_table';
	 $local_tasks['entity.node.webform.results_table']['weight'] = -100;
	 unset($local_tasks['entity.node.webform.results_submissions']);
       }
}

/*
 * hook_form_views_exposed_form_alter for search page plcaeholder.
 */
function iitinap_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {    
       switch ($form['#id']) {
	  case 'views-exposed-form-solr-s-page-1':
	    //Setting placeholder
		 $form['aggregated_field']['#attributes']['placeholder'] = t('Search Programs,Departments,Institutes');
       }
}



